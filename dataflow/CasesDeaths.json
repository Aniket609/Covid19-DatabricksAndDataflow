{
	"name": "CasesDeaths",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Cases_deaths",
						"type": "DatasetReference"
					},
					"name": "casesDeaths"
				},
				{
					"dataset": {
						"referenceName": "Country_lookup",
						"type": "DatasetReference"
					},
					"name": "countryLookup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "processedCasesAndDeaths",
						"type": "DatasetReference"
					},
					"name": "CasesAndDeaths"
				}
			],
			"transformations": [
				{
					"name": "countryCodeLookup"
				},
				{
					"name": "selectRelevant"
				},
				{
					"name": "pivotCount"
				},
				{
					"name": "selectRename"
				},
				{
					"name": "EuropeOnly"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          continent as string,",
				"          population as integer,",
				"          indicator as string,",
				"          daily_count as integer,",
				"          date as date,",
				"          rate_14_day as integer,",
				"          source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> casesDeaths",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> countryLookup",
				"EuropeOnly, countryLookup lookup(casesDeaths@country == countryLookup@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> countryCodeLookup",
				"countryCodeLookup select(mapColumn(",
				"          country = casesDeaths@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population = casesDeaths@population,",
				"          indicator,",
				"          daily_count,",
				"          reported_date = date,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectRelevant",
				"selectRelevant pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          source),",
				"     pivotBy(indicator, ['confirmed cases', 'deaths']),",
				"     count = sum(daily_count),",
				"     columnNaming: '$V$N',",
				"     lateral: true) ~> pivotCount",
				"pivotCount select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          source,",
				"          cases_count = {confirmed casescount},",
				"          deaths_count = deathscount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectRename",
				"casesDeaths filter(continent == \"Europe\" && not(isNull(country_code))) ~> EuropeOnly",
				"selectRename sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          country as string,",
				"          country_code as string,",
				"          continent as string,",
				"          population as string,",
				"          indicator as string,",
				"          daily_count as string,",
				"          date as string,",
				"          rate_14_day as string,",
				"          source as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CasesAndDeaths"
			]
		}
	}
}